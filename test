<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Nội Dung Bảo Mật & Media Đa Năng v2.3</title> <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script> <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<style>
/* --- Root Variables, Base Styles, Background Effects --- */
:root{--primary:#00f7ff;--secondary:#6e00ff;--accent:#ff00aa;--error:#ff3d71;--success:#00ff88;--warning:#ffcc00;--bg-dark:#0a0a20;--bg-darker:#050510;--bg-light:rgba(20,20,50,.5);--bg-lighter:rgba(30,30,70,.3);--text-light:#e0e0ff;--text-lighter:#fff;--text-dim:rgba(224,224,255,.6);--border-radius:12px;--box-shadow:0 0 30px rgba(0,247,255,.2);--transition:all .4s cubic-bezier(.175,.885,.32,1.275);--iframe-border:rgba(110, 0, 255, 0.4);--md-border:rgba(110,0,255,.25);--code-bg:rgba(0,10,30,.8);--expired-color:var(--error);--expired-bg:rgba(255,61,113,.1); --study-question-border: rgba(0, 247, 255, 0.5);--study-question-bg: rgba(0, 100, 120, 0.1);--study-answer-color: var(--success);--study-explanation-bg: rgba(110, 0, 255, 0.1);--study-explanation-border: var(--secondary); }
*{margin:0;padding:0;box-sizing:border-box}html{scroll-behavior:smooth}
body{font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif;background-color:var(--bg-dark);color:var(--text-light);min-height:100vh;overflow-x:hidden;line-height:1.6;position:relative;display:flex;align-items:center;justify-content:center;padding:2rem 1rem}
.particles-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:-1;overflow:hidden; pointer-events: none;} .particle{position:absolute;background:radial-gradient(circle,var(--primary) 0%,transparent 70%);border-radius:50%;opacity:.6;animation:particle-anim linear infinite} @keyframes particle-anim{0%{transform:translateY(0) rotate(0deg);opacity:0}10%{opacity:.6}100%{transform:translateY(-1500px) rotate(720deg);opacity:0}} .grid-overlay,.scanlines,.glow-effect{position:fixed;top:0;left:0;width:100%;height:100%;z-index:-1;pointer-events:none} .grid-overlay{background-image:linear-gradient(rgba(110,0,255,.05) 1px,transparent 1px),linear-gradient(90deg,rgba(110,0,255,.05) 1px,transparent 1px);background-size:40px 40px} .scanlines{background:repeating-linear-gradient(0deg,rgba(0,247,255,.03),rgba(0,247,255,.03) 1px,transparent 1px,transparent 3px);animation:scanline 8s linear infinite} @keyframes scanline{0%{background-position:0 0}100%{background-position:0 100%}} .glow-effect{background:radial-gradient(circle at center,rgba(0,247,255,.05) 0%,transparent 70%);animation:pulse 8s infinite alternate} @keyframes pulse{0%{opacity:.3;transform:scale(.95)}100%{opacity:.7;transform:scale(1.05)}}
/* --- Target Page Container --- */
.container{max-width:1000px; width:100%;margin:auto;padding:2rem 2.5rem 3rem 2.5rem;background:rgba(10,10,32,.9);backdrop-filter:blur(12px);border-radius:var(--border-radius);box-shadow:var(--box-shadow);border:1px solid rgba(110,0,255,.3);position:relative;overflow:visible;transition:var(--transition);animation:floatTarget 7s ease-in-out infinite} @keyframes floatTarget{0%,100%{transform:translateY(0)}50%{transform:translateY(-12px)}} .container::before{content:'';position:absolute;top:-50%;left:-50%;width:200%;height:200%;background:radial-gradient(circle at center,rgba(0,247,255,.1) 0%,transparent 60%);z-index:-1;animation:pulse 15s infinite alternate}
/* === NEW: Initial Login Choice Section === */
#initial-login-choice { text-align: center; padding: 2rem 1rem; transition: opacity .5s ease, transform .5s ease, visibility 0s linear .6s, max-height 0.6s ease; margin-bottom: 1rem; overflow: hidden; max-height: 500px; /* Allow space */ }
#initial-login-choice.hidden { opacity: 0; transform: scale(0.9); pointer-events: none; visibility: hidden; position: absolute; max-height: 0; padding: 0; margin: 0; border: 0; }
#initial-login-choice .page-title { font-size: 1.6rem; margin-bottom: 1.5rem; } /* Reuse title */
#initial-login-choice h2 { color: var(--primary); font-weight: 300; letter-spacing: 1px; margin-bottom: 2rem; font-size: 1.5rem; }
.login-choice-buttons { display: flex; flex-direction: column; align-items: center; gap: 1.5rem; }
.login-choice-button { background: var(--bg-lighter); color: var(--text-light); border: 1px solid rgba(110, 0, 255, 0.4); padding: 1rem 2rem; border-radius: var(--border-radius); cursor: pointer; font-size: 1.1rem; font-weight: 600; transition: var(--transition); box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); display: flex; align-items: center; gap: 0.8rem; min-width: 280px; justify-content: center; text-align: center;}
.login-choice-button:hover { background: linear-gradient(135deg, var(--secondary), var(--primary)); color: white; transform: translateY(-3px) scale(1.03); box-shadow: 0 6px 25px rgba(110, 0, 255, 0.5); border-color: transparent; }
.login-choice-button .material-icons { font-size: 1.6rem; }
/* --- Password Section --- */
.page-title{/* Existing reused style */}
.final-page-password-form{display:flex;flex-direction:column;gap:1.5rem;margin-top:1rem;max-width:400px;margin-left:auto;margin-right:auto}
#final-password-section{transition:opacity .5s ease,transform .5s ease,visibility 0s linear .6s, max-height 0.6s ease; overflow:hidden;visibility:hidden; max-height: 0; padding: 0; margin: 0; border: 0; position: absolute; /* Initially remove from flow */}
#final-password-section.visible { visibility: visible; opacity: 1; transform: scale(1); max-height: 500px; /* Allow space */ padding: 1rem 0; margin-bottom: 2rem; position: relative; /* Put back in flow */ }
#final-password-section.hiding{/* Existing hiding animation */}
.final-page-input-group label{/*...*/} .final-page-input-group input[type=password]{/*...*/} .final-page-button{/*...*/} .final-page-error-message{/*...*/} .final-page-donation-prompt{/*...*/}
/* --- NEW: Image Upload Section --- */
#image-upload-section { text-align: center; padding: 1.5rem; display: flex; flex-direction: column; align-items: center; gap: 1.5rem; transition: opacity .5s ease, transform .5s ease, visibility 0s linear .6s, max-height 0.6s ease; margin-bottom: 2rem; visibility: hidden; opacity: 0; transform: scale(0.9); max-height: 0; overflow: hidden; padding: 0; margin: 0; border: 0; position: absolute; /* Initially remove from flow */ width: 100%; left: 0;}
#image-upload-section.visible { visibility: visible; opacity: 1; transform: scale(1); max-height: 600px; /* Allow space */ padding: 1.5rem; margin-bottom: 2rem; position: relative; /* Put back in flow */ }
#image-upload-section .page-title { font-size: 1.5rem; margin-bottom: 1.5rem; } /* Reuse */
#image-upload-section #image-upload-input { display: none; }
#image-upload-label { background: var(--bg-light); border: 2px dashed var(--secondary); border-radius: var(--border-radius); padding: 1.5rem 2rem; cursor: pointer; transition: var(--transition); display: inline-flex; flex-direction: column; align-items: center; gap: 0.8rem; min-width: 250px; max-width: 90%; text-align: center; }
#image-upload-label:hover { background: var(--bg-lighter); border-color: var(--primary); color: var(--primary); }
#image-upload-label .material-icons { font-size: 3rem; color: var(--secondary); transition: color 0.3s; }
#image-upload-label:hover .material-icons { color: var(--primary); }
#image-upload-label span { font-size: 1rem; font-weight: 500; }
#image-preview { max-width: 150px; max-height: 150px; border-radius: 8px; margin-top: 1rem; border: 1px solid var(--md-border); object-fit: cover; display: none; /* Hidden until image selected */ }
#image-upload-button { margin-top: 1rem; background: linear-gradient(135deg, var(--success), #00e676); color: var(--bg-darker); /* Custom color */ }
#image-upload-button:hover:not(:disabled) { box-shadow: 0 6px 25px rgba(0, 255, 136, 0.5); }
#image-upload-error { margin-top: 1rem; /* Uses final-page-error-message styles */ color:var(--error); /* Ensure error color */}
/* --- Content Section --- */
#final-content-section{/* Existing styles */}
/* --- Media, Markdown, Study Mode, Modal Styles --- */
#embedded-images-container { /* ... */ } #embedded-iframes-container { /* ... */ }
.final-template-styles{ /* ... */ } .final-template-styles.study-mode { /* ... */ }
.modal-overlay{ /* ... */ } .modal-content{ /* ... */ }
/* --- Misc, Footer, Expiration, Responsive --- */
.hidden{display:none!important;visibility:hidden} .footer-note{ /* ... */ } #expiration-message{ /* ... */ } body.expired .container{ /* ... */ }
@media (max-width:768px){/*...*/} @media (max-width:480px){/*...*/}
</style>
</head>
<body id="target-body">
    <!-- Background Effects, Expiration Message -->
    <div class="particles-container" id="final-particles"></div> <div class="grid-overlay"></div> <div class="scanlines"></div> <div class="glow-effect"></div>
    <div id="expiration-message"><i class="material-icons">sentiment_very_dissatisfied</i> Ôi không, vận may của bạn đã hết. File đã hết hạn rùi!!!</div>

    <div class="container">
        <!-- === NEW: Initial Login Choice (Displayed first by JS if needed) === -->
        <div id="initial-login-choice">
             <h1 class="page-title"><i class="material-icons">lock_person</i> Truy Cập Nội Dung</h1>
             <h2>Chọn phương thức xác thực:</h2>
             <div class="login-choice-buttons">
                 <button class="login-choice-button" id="login-choice-password">
                     <i class="material-icons">password</i> Nhập Mật khẩu
                 </button>
                 <button class="login-choice-button" id="login-choice-image">
                     <i class="material-icons">photo_camera</i> Tải Ảnh Xác Nhận
                 </button>
             </div>
         </div>

        <!-- Password Input Section -->
        <div id="final-password-section"> <!-- Add class="visible" by JS -->
             <h1 class="page-title"><i class="material-icons">password</i> Nhập Mật Khẩu</h1>
            <form class="final-page-password-form" id="password-form" onsubmit="checkFinalPagePassword(event); return false;">
                <div class="final-page-input-group">
                    <label for="final-password-input"><i class="material-icons">key</i> Mật Khẩu Truy Cập:</label>
                    <input type="password" id="final-password-input" placeholder="••••••••••••" autocomplete="current-password" required>
                </div>
                <div class="final-page-donation-prompt">🤫 Quên mật khẩu? Đôn nết nhẹ <strong>10K</strong> vào Momo/ZaloPay <strong>0901574726</strong>, nhắn vấn đề và tớ sẽ cố gắng giúp! 😉</div>
                <button type="submit" class="final-page-button" id="final-submit-btn"><i class="material-icons">sensors</i> Giải Mã & Xem</button>
                <div class="final-page-error-message" id="final-error-message"></div>
            </form>
        </div>

        <!-- Image Upload Section -->
        <div id="image-upload-section"> <!-- Add class="visible" by JS -->
             <h1 class="page-title"><i class="material-icons">add_photo_alternate</i> Tải Ảnh Xác Nhận</h1>
             <p style="color: var(--text-dim); margin-bottom: 1.5rem; font-size: 0.95rem;">Tải lên một hình ảnh để mở khóa nội dung.</p>
             <label for="image-upload-input" id="image-upload-label">
                <i class="material-icons">cloud_upload</i>
                <span>Nhấn để Chọn Ảnh</span>
             </label>
             <input type="file" id="image-upload-input" accept="image/*">
             <img id="image-preview" src="#" alt="Xem trước ảnh" />
             <button type="button" class="final-page-button" id="image-upload-button" disabled><i class="material-icons">check_circle</i> Xác Nhận & Xem Nội Dung</button>
            <div class="final-page-error-message" id="image-upload-error"></div>
         </div>


        <!-- Content Display Section -->
        <div id="final-content-section"> <!-- Add class="visible" by JS -->
            <div id="embedded-images-container"></div>
            <div class="final-template-styles" id="final-markdown-content"></div>
            <div id="embedded-iframes-container"></div>
            <div class="footer-note"><i class="material-icons">verified_user</i> An toàn với mã hóa AES. v2.3</div>
        </div>
    </div>
    <!-- Modals -->
    <div class="modal-overlay hidden initial-state" id="final-warning-modal"> <div class="modal-content"><h2 class="modal-title"><i class="material-icons">gpp_bad</i> CẢNH BÁO</h2> <div class="modal-message"> <p>Truy cập vùng dữ liệu mã hóa.</p><p>Hành vi trái phép có thể bị ghi nhận.</p><p><strong>Bảo mật thông tin!</strong></p> </div> <button class="modal-button" id="final-warning-confirm"> <i class="material-icons">check_circle_outline</i> TÔI HIỂU </button> </div> </div>
    <div class="modal-overlay hidden initial-state" id="huan-error-modal"> <div class="modal-content"><h2 class="modal-title" style="color: var(--warning);"><i class="material-icons">sentiment_very_dissatisfied</i> Sai Rồi Fen!</h2> <div class="modal-message" style="font-style: italic;"> <p>Sau nay, chỉ có làm chịu khó cần cù thì bù siêng năng,... Cái loại xem chùa mà đòi free thì ăn cám<br><strong style="font-style:normal;font-weight:bold;font-size:1.1em;">| -_- |</strong></p> </div> <button class="modal-button" id="huan-error-confirm"> <i class="material-icons">refresh</i> THỬ LẠI </button> </div> </div>

    <script>
        // === TARGET PAGE SCRIPT (v2.3) ===
        const encryptedMarkdownContent = `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`; // Correctly handle template literal if not already wrapped
        const pageLayoutMode = `image`; // Assuming this should be targetLoginMethodJs based on usage
        const imageLayout = `grid`;
        const embeddedImageUrls = [];
        const embeddedIframeUrls = [];
        const expiryDetails = null;
        const originalPagePasswordEncoded = 'YWRtaW4xMjNA'; // BASE64 of original page password
        const targetLoginMethod = `image`; // 'password' or 'image'
        const targetUserEmail = `niyakipham@gmail.com`; // Creator's email
        const encryptedAppPassword = `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`; // App Pass encrypted with original page password


        // --- Elements ---
        const targetBody = document.getElementById('target-body'); const expirationMessageDiv = document.getElementById('expiration-message'); const pageContainer = document.querySelector('.container'); const initialLoginChoiceSection = document.getElementById('initial-login-choice'); const loginChoicePasswordBtn = document.getElementById('login-choice-password'); const loginChoiceImageBtn = document.getElementById('login-choice-image'); const finalPasswordSection=document.getElementById('final-password-section'); const finalPasswordInput=document.getElementById('final-password-input'); const finalErrorMessage=document.getElementById('final-error-message'); const imageUploadSection = document.getElementById('image-upload-section'); const imageUploadInput = document.getElementById('image-upload-input'); const imageUploadLabel = document.getElementById('image-upload-label'); const imageUploadButton = document.getElementById('image-upload-button'); const imageUploadError = document.getElementById('image-upload-error'); const imagePreview = document.getElementById('image-preview'); const finalContentSection=document.getElementById('final-content-section'); const finalImagesContainer=document.getElementById('embedded-images-container'); const finalMarkdownContentDiv=document.getElementById('final-markdown-content'); const finalIframesContainer=document.getElementById('embedded-iframes-container'); const finalWarningModal=document.getElementById('final-warning-modal'); const finalWarningConfirmBtn=document.getElementById('final-warning-confirm'); const huanErrorModal=document.getElementById('huan-error-modal'); const huanErrorConfirmBtn=document.getElementById('huan-error-confirm'); const finalParticlesContainer=document.getElementById('final-particles'); const passwordSubmitButton=document.getElementById('final-submit-btn'); let errorTimeout = null; let imageUploadFile = null;

        // --- Functions (Keep Decrypt, Particles, Base64, etc.) ---
        function createFinalParticles(){ const cont = document.getElementById('final-particles'); if(!cont||cont.children.length>40&&Math.random()<.9)return;cont.innerHTML='';const n=window.innerWidth>768?120:60;for(let i=0;i<n;i++){const p=document.createElement('div');p.classList.add('particle');const s=Math.random()*4+1;const x=Math.random()*window.innerWidth;const d=Math.random()*12;const u=Math.random()*18+12;const o=Math.random()*.4+.1;Object.assign(p.style,{width:`${s}px`,height:`${s}px`,left:`${x}px`,bottom:`-${s}px`,animationDuration:`${u}s`,animationDelay:`${d}s`,opacity:o});const c=['#00f7ff','#6e00ff','#ff00aa'][Math.floor(Math.random()*3)];p.style.background=`radial-gradient(circle, ${c} 0%, transparent 70%)`;cont.appendChild(p)}}
        function multiLayerDecrypt(encryptedBase64Data, password, layers = 10) { if (typeof CryptoJS === 'undefined') throw new Error("Lỗi: Không tìm thấy CryptoJS."); let currentData = encryptedBase64Data; try { for (let i = layers - 1; i >= 0; i--) { const layerKey = password + i; let decryptedBytes; try { decryptedBytes = CryptoJS.AES.decrypt(currentData, layerKey); } catch (e){ throw new Error('decrypt-fail');} let decryptedUtf8; try { decryptedUtf8 = decryptedBytes.toString(CryptoJS.enc.Utf8); } catch (e){ throw new Error('decrypt-fail');} if (!decryptedUtf8 && i > 0 && encryptedBase64Data !== "") { throw new Error('decrypt-fail'); } if (decryptedUtf8) { const parts = decryptedUtf8.split("|"); if (parts.length < 3 || parts[parts.length - 2] !== password || parseInt(parts[parts.length - 1], 10) !== i) { throw new Error('decrypt-fail'); } currentData = parts.slice(0, parts.length - 2).join('|'); } else { currentData = ""; } } return currentData; } catch (e) { if (e.message !== 'decrypt-fail') { console.error("Lỗi giải mã:", e); } throw new Error('decrypt-fail'); } }
        function showInlineError(message, errorElementId = 'final-error-message'){ clearTimeout(errorTimeout); const errorDiv = document.getElementById(errorElementId); if (!errorDiv) return; errorDiv.innerHTML = `<i class="material-icons">error</i> ${message||'Lỗi không xác định'}`; errorDiv.classList.add('show'); if(errorElementId === 'final-error-message' && finalPasswordInput){finalPasswordInput.classList.add('shake'); setTimeout(()=> finalPasswordInput.classList.remove('shake'), 500);} if (errorElementId === 'image-upload-error') { imageUploadLabel?.classList.add('shake'); setTimeout(() => imageUploadLabel?.classList.remove('shake'), 500); } errorTimeout = setTimeout(() => { errorDiv.classList.remove('show'); }, 3500); }
        function showHuanModal() { if(!huanErrorModal) return; huanErrorModal.classList.add('initial-state'); huanErrorModal.classList.remove('hidden'); requestAnimationFrame(()=>{huanErrorModal.classList.remove('initial-state')}); }
        function isValidUrl(string) { /*...*/ }
        function decodeBase64Multi(encodedString, layers = 1) { /*...*/ }
        function isAdminOrFreeSosViewActive() { /*...*/ }
        function isExpired() { /*...*/ }
        function processStudyModeContent() { /*...*/ }
        function renderContent(decryptedHtml) { /*...*/ } // These functions remain unchanged

        // Function to decrypt the optional encrypted App Password (informational)
        function getDecryptedAppPassword(keyPassword) { /*...*/ } // Logic as provided before

        // Function to transition smoothly and display the main content
         function showFinalContent() {
             const hideSection = (section) => {
                if (section && !section.classList.contains('hidden')) {
                    section.style.position = 'absolute'; // Prevent layout jump
                     section.classList.add('hidden'); // Start fade out / shrink
                 }
             };
             hideSection(initialLoginChoiceSection);
             hideSection(finalPasswordSection);
            hideSection(imageUploadSection);

            if(finalContentSection){
                finalContentSection.classList.remove('hidden'); // Make sure it's not display:none if it was
                setTimeout(() => { // Allow layout to settle after hiding others
                     finalContentSection.classList.add('visible'); // Start fade-in animation
                     // Scroll and focus logic
                     setTimeout(()=>{ const focusTarget = finalContentSection.querySelector('.study-question, h1, h2, h3') || finalImagesContainer || finalIframesContainer || finalContentSection; if(focusTarget?.focus){ try{focusTarget.setAttribute('tabindex','-1');focusTarget.focus({preventScroll:true});}catch(e){} window.scrollTo({top:pageContainer.offsetTop-20,behavior:'smooth'})} else {window.scrollTo({top:pageContainer.offsetTop-20,behavior:'smooth'})} }, 500); // Delay focus slightly more
                }, 50); // Short delay before making content visible
            }
         }

        // Bypass Logic (Admin/FreeSOS)
        function displayContentAsAdminOrFreeSOS() { /* ... Logic to decrypt and call showFinalContent() unchanged ... */ }

        // Password Check (Normal User - Password Method)
        function checkFinalPagePassword(event){ /* ... Logic to decrypt and call showFinalContent() unchanged ... */ }

        // Image Upload Handling (Normal User - Image Method)
        imageUploadInput.addEventListener('change', (event) => { /* ... File selection & preview logic unchanged ... */ });
        imageUploadButton.addEventListener('click', () => { /* ... Logic to decrypt with original password and call showFinalContent() unchanged ... */ });

        // --- Initialization ---
        document.addEventListener('DOMContentLoaded',()=>{
            createFinalParticles();
            finalContentSection.setAttribute('tabindex','-1'); // Make focusable

            const isBypass = isAdminOrFreeSosViewActive();
            const hasExpired = isExpired();

            if (isBypass) {
                 targetBody.classList.remove('expired');
                 if(expirationMessageDiv) expirationMessageDiv.style.display = 'none';
                 if (initialLoginChoiceSection) initialLoginChoiceSection.classList.add('hidden'); // Hide choice
                displayContentAsAdminOrFreeSOS(); // Directly display content
            } else if (hasExpired) {
                targetBody.classList.add('expired');
                 if(expirationMessageDiv) expirationMessageDiv.style.display = 'block';
                 if(pageContainer) pageContainer.style.display = 'none';
            } else {
                // --- Normal User Flow ---
                targetBody.classList.remove('expired'); if(expirationMessageDiv) expirationMessageDiv.style.display = 'none'; if(pageContainer) pageContainer.style.display = 'block';

                // Hide content & specific login sections initially
                if(finalContentSection) finalContentSection.classList.add('hidden');
                if(finalPasswordSection) finalPasswordSection.classList.remove('visible'); finalPasswordSection.classList.add('hidden');
                if(imageUploadSection) imageUploadSection.classList.remove('visible'); imageUploadSection.classList.add('hidden');


                // Determine which initial view to show
                 if (targetLoginMethod === 'image') {
                     // Show the initial choice buttons
                     if(initialLoginChoiceSection) initialLoginChoiceSection.classList.remove('hidden');
                 } else {
                     // Default to password login directly
                     if(initialLoginChoiceSection) initialLoginChoiceSection.classList.add('hidden');
                     if(finalPasswordSection) finalPasswordSection.classList.remove('hidden'); finalPasswordSection.classList.add('visible');
                     setTimeout(() => finalPasswordInput?.focus({preventScroll:true}), 50);
                 }

                 // --- Event Listeners for Initial Choice Buttons ---
                 if(loginChoicePasswordBtn){
                     loginChoicePasswordBtn.addEventListener('click', () => {
                         if(initialLoginChoiceSection) initialLoginChoiceSection.classList.add('hidden');
                         if(finalPasswordSection) { finalPasswordSection.classList.remove('hidden'); setTimeout(()=> finalPasswordSection.classList.add('visible'), 10);} // Add visible for animation
                        if(imageUploadSection) { imageUploadSection.classList.add('hidden'); imageUploadSection.classList.remove('visible');} // Hide other
                         setTimeout(() => finalPasswordInput?.focus({preventScroll:true}), 100);
                     });
                 }

                 if(loginChoiceImageBtn){
                    // Only add listener if image method is actually enabled
                     if (targetLoginMethod === 'image') {
                         loginChoiceImageBtn.addEventListener('click', () => {
                             if(initialLoginChoiceSection) initialLoginChoiceSection.classList.add('hidden');
                            if(imageUploadSection) { imageUploadSection.classList.remove('hidden'); setTimeout(() => imageUploadSection.classList.add('visible'), 10); } // Show image section
                             if(finalPasswordSection) { finalPasswordSection.classList.add('hidden'); finalPasswordSection.classList.remove('visible');} // Hide other
                             // No initial modal warning here, user just needs to upload
                         });
                     } else {
                        // Optionally disable or hide the button if image login wasn't chosen during generation
                         loginChoiceImageBtn.disabled = true;
                        loginChoiceImageBtn.style.opacity = '0.5';
                        loginChoiceImageBtn.style.cursor = 'not-allowed';
                        loginChoiceImageBtn.title = 'Đăng nhập ảnh không khả dụng';
                    }
                 }

                // Setup password submit & error modals
                 if (finalPasswordInput) { finalPasswordInput.addEventListener('keydown',(e)=>{ if(e.key === 'Enter') { checkFinalPagePassword(e); } }); }
                 if(huanErrorModal && huanErrorConfirmBtn){ const hCH=()=>{ huanErrorModal.classList.add('hidden'); setTimeout(()=> { if (finalPasswordSection?.classList.contains('visible')) finalPasswordInput?.focus(); else if (imageUploadSection?.classList.contains('visible')) imageUploadLabel?.focus(); }, 100); }; huanErrorConfirmBtn.onclick=hCH; huanErrorModal.onclick=(e)=>{ if(e.target===huanErrorModal) hCH(); }; }

                 // Reset file input state
                 if(imageUploadInput) imageUploadInput.value = null; if(imagePreview) imagePreview.style.display = 'none'; if(imageUploadButton) imageUploadButton.disabled = true;
            }
        });

        let finalResizeTimeout; window.addEventListener('resize',()=>{clearTimeout(finalResizeTimeout);finalResizeTimeout=setTimeout(createFinalParticles,300)});
    </script>
</body>
</html>
