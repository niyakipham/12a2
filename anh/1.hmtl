<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>English Vocabulary Quiz - Futuristic Interface</title>
    <style>
        /* === BASE STYLES (GIỮ NGUYÊN PHONG CÁCH SCI-FI TUYỆT VỜI) === */
        :root {
            --primary: #00f7ff; /* Xanh dương neon chủ đạo */
            --secondary: #6e00ff; /* Tím neon phụ */
            --accent: #ff00aa;  /* Hồng neon nhấn */
            --error: #ff3d71; /* Đỏ báo lỗi */
            --success: #00ff88; /* Xanh lá thành công */
            --warning: #ffcc00; /* Vàng cảnh báo */

            --bg-dark: #0a0a20; /* Nền tối đậm */
            --bg-darker: #050510; /* Nền tối hơn */
            --bg-light: rgba(20, 20, 50, 0.5); /* Nền sáng nhẹ (có độ trong) */
            --bg-lighter: rgba(30, 30, 70, 0.3); /* Nền sáng hơn (có độ trong) */

            --text-light: #e0e0ff; /* Màu chữ sáng */
            --text-lighter: #ffffff; /* Màu chữ trắng */
            --text-dim: rgba(224, 224, 255, 0.6); /* Màu chữ mờ */

            --border-radius: 12px; /* Bo góc */
            --box-shadow: 0 0 30px rgba(0, 247, 255, 0.2); /* Đổ bóng neon */
            --transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275); /* Hiệu ứng chuyển động mượt */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-dark);
            color: var(--text-light);
            min-height: 100vh;
            overflow-x: hidden;
            line-height: 1.6;
            position: relative;
        }

        /* === BACKGROUND EFFECTS (HIỆU ỨNG NỀN KHÔNG GIAN HUYỀN ẢO) === */
        .particles-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            overflow: hidden;
        }

        .particle {
            position: absolute;
            background: radial-gradient(circle, var(--primary) 0%, transparent 70%);
            border-radius: 50%;
            opacity: 0.6;
            animation: particle-anim linear infinite;
        }

        @keyframes particle-anim {
            0% { transform: translateY(0) rotate(0deg); opacity: 0; }
            10% { opacity: 0.6; }
            100% { transform: translateY(-1500px) rotate(720deg); opacity: 0; }
        }

        .grid-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image:
                linear-gradient(rgba(110, 0, 255, 0.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(110, 0, 255, 0.05) 1px, transparent 1px);
            background-size: 40px 40px;
            z-index: -1;
            pointer-events: none;
        }

        .scanlines {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: repeating-linear-gradient(
                0deg,
                rgba(0, 247, 255, 0.03),
                rgba(0, 247, 255, 0.03) 1px,
                transparent 1px,
                transparent 3px
            );
            z-index: -1;
            pointer-events: none;
            animation: scanline 8s linear infinite;
        }

        @keyframes scanline {
            0% { background-position: 0 0; }
            100% { background-position: 0 100%; }
        }

        /* === MAIN CONTAINER (KHỐI CHÍNH NỔI BẬT GIỮA KHÔNG GIAN) === */
        .container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2.5rem;
            background: rgba(10, 10, 32, 0.85); /* Nền tối với độ trong mờ ảo */
            backdrop-filter: blur(12px); /* Hiệu ứng kính mờ */
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            border: 1px solid rgba(110, 0, 255, 0.3); /* Viền tím neon */
            position: relative;
            overflow: hidden;
            transition: var(--transition);
            animation: float 6s ease-in-out infinite; /* Hiệu ứng lơ lửng */
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-15px); }
        }

        /* Hiệu ứng hào quang lan tỏa */
        .container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, rgba(0, 247, 255, 0.1) 0%, transparent 60%);
            z-index: -1;
            animation: pulse 15s infinite alternate;
        }

        @keyframes pulse {
            0% { transform: scale(0.8); opacity: 0.5; }
            100% { transform: scale(1.2); opacity: 0.8; }
        }

        h1 {
            text-align: center;
            color: var(--primary);
            margin-bottom: 2rem;
            font-weight: 300; /* Chữ mỏng nhẹ thanh thoát */
            letter-spacing: 2px;
            text-transform: uppercase;
            font-size: 1.8rem; /* Kích thước tiêu đề */
            text-shadow: 0 0 15px rgba(0, 247, 255, 0.5); /* Bóng chữ neon */
            position: relative;
            padding-bottom: 1rem;
        }

        h1::after { /* Đường gạch chân neon gradient */
            content: '';
            position: absolute;
            bottom: 0;
            left: 25%;
            width: 50%;
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--primary), transparent);
        }

        /* === PASSWORD FORM (KHUNG NHẬP MẬT KHẨU ĐÃ ĐƯỢC TINH CHỈNH) === */
        .password-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .input-group {
            position: relative;
        }

        .input-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-light);
            font-size: 0.9rem;
            letter-spacing: 1px;
        }

        input[type="password"] {
            width: 100%;
            padding: 1rem 1.5rem;
            background: var(--bg-light);
            border: 1px solid rgba(110, 0, 255, 0.5);
            border-radius: var(--border-radius);
            color: var(--text-light);
            font-size: 1rem;
            transition: var(--transition);
            outline: none;
            letter-spacing: 2px;
        }

        input[type="password"]:focus {
            border-color: var(--primary);
            box-shadow: 0 0 15px rgba(0, 247, 255, 0.5);
            transform: translateY(-2px); /* Nhấc nhẹ lên khi focus */
        }

        button {
            background: linear-gradient(135deg, var(--secondary), var(--primary)); /* Gradient đẹp mắt */
            color: white;
            border: none;
            padding: 1rem;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: var(--transition);
            box-shadow: 0 4px 20px rgba(110, 0, 255, 0.4);
            position: relative;
            overflow: hidden; /* Để chứa hiệu ứng ánh kim */
        }

        button:hover {
            transform: translateY(-3px); /* Nhấc cao hơn khi hover */
            box-shadow: 0 6px 25px rgba(0, 247, 255, 0.6); /* Tăng bóng */
        }

        /* Hiệu ứng ánh kim chạy qua nút */
        button::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0.1) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            transform: rotate(45deg);
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) rotate(45deg); }
            100% { transform: translateX(100%) rotate(45deg); }
        }

        /* === ERROR MESSAGE (THÔNG BÁO LỖI KHI NHẬP SAI PASS) === */
        .error-message {
            color: var(--error);
            text-align: center;
            margin-top: 1rem;
            font-size: 0.9rem;
            height: 1.5rem; /* Giữ chiều cao cố định để tránh nhảy layout */
            transition: var(--transition);
        }

        /* === DONATION NOTE (GHI CHÚ) - Có thể giữ lại hoặc bỏ đi === */
        .donation-note {
            margin-top: 2.5rem;
            font-size: 0.8rem;
            text-align: center;
            color: var(--text-dim);
            line-height: 1.6;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: var(--border-radius);
            border-left: 3px solid var(--accent); /* Thêm điểm nhấn */
        }

        /* === CONTENT SECTION (KHU VỰC HIỂN THỊ QUIZ - ẨN BAN ĐẦU) === */
        .content {
            display: none; /* Ban đầu ẩn đi */
            animation: fadeIn 1s ease-in; /* Hiệu ứng xuất hiện mượt mà */
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* === QUESTIONS STYLING (ĐỊNH DẠNG CHO CÁC CÂU HỎI QUIZ) === */
        .question {
            background: var(--bg-lighter);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            margin-bottom: 1.5rem;
            border-left: 4px solid var(--primary); /* Đường viền nhấn mạnh bên trái */
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .question:hover {
            transform: translateY(-5px); /* Nhấc nhẹ lên khi hover */
            box-shadow: 0 10px 25px rgba(0, 247, 255, 0.1); /* Tăng bóng nhẹ */
        }

        .question-number {
            position: absolute;
            top: 0;
            left: 0;
            background: var(--primary);
            color: var(--bg-darker);
            padding: 0.3rem 1rem;
            border-bottom-right-radius: var(--border-radius);
            font-weight: bold;
            font-size: 0.8rem;
        }

        .question-text {
            font-weight: bold;
            margin-bottom: 1rem;
            color: var(--text-lighter);
            padding-top: 1.5rem; /* Thêm khoảng cách với số câu hỏi */
        }

        .options {
            display: grid;
            grid-template-columns: 1fr; /* Các lựa chọn xếp chồng lên nhau */
            gap: 0.75rem;
        }

        .option {
            padding: 1rem;
            background: rgba(20, 20, 50, 0.3);
            border-radius: calc(var(--border-radius) - 4px);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
            border: 1px solid transparent; /* Viền trong suốt ban đầu */
            color: var(--text-light); /* Đảm bảo màu chữ cho các lựa chọn */
        }

        .option:hover {
            background: rgba(110, 0, 255, 0.2); /* Đổi màu nền khi hover */
            border-color: rgba(110, 0, 255, 0.5); /* Hiện viền tím khi hover */
            color: var(--text-lighter); /* Đổi màu chữ sáng hơn khi hover */
        }

        /* Định dạng cho lựa chọn được chọn */
        .option.selected {
            border-color: var(--accent); /* Viền hồng khi chọn */
        }

        /* Định dạng cho lựa chọn đúng */
        .option.correct {
            background: rgba(0, 200, 100, 0.2); /* Nền xanh lá nhạt */
            border-left: 4px solid var(--success); /* Viền xanh lá bên trái */
            color: var(--success); /* Chữ màu xanh lá */
            font-weight: bold;
        }

        /* Định dạng cho lựa chọn sai */
        .option.incorrect {
            background: rgba(255, 61, 113, 0.2); /* Nền đỏ nhạt */
            border-left: 4px solid var(--error); /* Viền đỏ bên trái */
            color: var(--error); /* Chữ màu đỏ */
            text-decoration: line-through; /* Gạch ngang lựa chọn sai */
        }

         /* Phần giải thích */
        .explanation {
            margin-top: 1.5rem;
            padding: 1rem;
            background: rgba(0, 150, 255, 0.1); /* Nền xanh dương nhạt */
            border-radius: calc(var(--border-radius) - 4px);
            font-size: 0.9rem;
            display: none; /* Ban đầu ẩn */
            border-left: 3px solid var(--primary); /* Viền xanh dương bên trái */
            animation: slideDown 0.5s ease-out; /* Hiệu ứng xổ xuống */
            color: var(--text-light); /* Màu chữ cho giải thích */
        }

        @keyframes slideDown {
            from { opacity: 0; max-height: 0; }
            to { opacity: 1; max-height: 500px; /* Đặt giá trị đủ lớn */ }
        }

        .explanation-title {
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .explanation-title i {
            margin-right: 0.5rem;
        }

        .explanation span { /* Đảm bảo màu chữ cho phần giải thích được bôi đậm */
             color: var(--text-lighter);
             font-weight: normal;
        }

        /* === LOGOUT BUTTON (NÚT ĐĂNG XUẤT) === */
        .logout-btn {
            background: rgba(255, 61, 113, 0.2);
            color: var(--error);
            margin-top: 2rem;
            width: 100%;
            border: 1px solid var(--error);
        }

        .logout-btn:hover {
            background: rgba(255, 61, 113, 0.3);
            box-shadow: 0 6px 25px rgba(255, 61, 113, 0.3);
        }

        /* === ICON FONTS (GOOGLE MATERIAL ICONS) === */
        @font-face {
            font-family: 'Material Icons';
            font-style: normal;
            font-weight: 400;
            src: url(https://fonts.gstatic.com/s/materialicons/v140/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2');
        }

        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 20px; /* Chỉnh size icon phù hợp */
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
            vertical-align: middle; /* Căn giữa icon với chữ */
            margin-right: 0.3rem; /* Khoảng cách nhỏ với text */
        }

        /* === RESPONSIVE DESIGN (TƯƠNG THÍCH MÀN HÌNH NHỎ) === */
        @media (max-width: 768px) {
            .container {
                margin: 1rem;
                padding: 1.5rem;
            }

            h1 {
                font-size: 1.5rem;
            }
        }

        /* === ANIMATIONS (HIỆU ỨNG RUNG LẮC KHI NHẬP SAI) === */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }

        .shake {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }

    </style>
</head>
<body>
    <!-- Background Effects -->
    <div class="particles-container" id="particles"></div>
    <div class="grid-overlay"></div>
    <div class="scanlines"></div>

    <!-- Login Container -->
    <div class="container" id="login-container">
        <h1><i class="material-icons">vpn_key</i> Vocabulary Quiz Access</h1> <!-- Tiêu đề mới -->

        <form class="password-form" onsubmit="checkPassword(); return false;"> <!-- Thêm onsubmit để Enter hoạt động -->
            <div class="input-group">
                <label for="password-input">ENTER ACCESS CODE</label>
                <input type="password" id="password-input" placeholder="············" autocomplete="off">
            </div>
            <button type="button" id="submit-btn"> <!-- Đổi thành type="button" để tránh submit form mặc định -->
                <i class="material-icons">lock_open</i> Access Quiz
            </button>
            <div class="error-message" id="error-message"></div>
        </form>

        <!-- Ghi chú có thể giữ lại hoặc bỏ -->
        <!-- <div class="donation-note">
            This quiz portal is maintained through community support. Consider donating!
        </div> -->
    </div>

    <!-- Content Section (Quiz) - Hidden Initially -->
    <div class="container content" id="content-container">
        <!-- Questions will be dynamically inserted here by JavaScript -->
         <h1><i class="material-icons">school</i> English Vocabulary Challenge</h1>
         <div id="questions-container"></div>
         <button id="logout-btn" class="logout-btn">
             <i class="material-icons">logout</i> LOGOUT
         </button>
    </div>

    <script>
        // ====== CONFIGURATION ======
        const CORRECT_PASSWORD = "khongcomatkhau"; // Đặt mật khẩu cố định ở đây

        // ====== UTILITY FUNCTIONS ======
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            if (!particlesContainer) return; // Kiểm tra nếu element tồn tại
            particlesContainer.innerHTML = ''; // Xóa particles cũ

            const numParticles = window.innerWidth > 768 ? 100 : 50; // Giảm số lượng trên mobile

            for (let i = 0; i < numParticles; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');

                const size = Math.random() * 6 + 2; // Kích thước hạt nhỏ hơn chút
                const posX = Math.random() * window.innerWidth;
                const delay = Math.random() * 10;
                const duration = Math.random() * 15 + 10;
                const opacity = Math.random() * 0.5 + 0.1; // Mờ hơn chút

                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${posX}px`;
                particle.style.bottom = `-${size}px`;
                particle.style.animationDuration = `${duration}s`;
                particle.style.animationDelay = `${delay}s`;
                particle.style.opacity = opacity;

                particlesContainer.appendChild(particle);
            }
        }

        // ====== PASSWORD SYSTEM ======
        function checkPassword() {
            const passwordInput = document.getElementById('password-input');
            const errorElement = document.getElementById('error-message');
            const loginContainer = document.getElementById('login-container');
            const contentContainer = document.getElementById('content-container');

            if (!passwordInput || !errorElement || !loginContainer || !contentContainer) return; // Check elements exist

            const input = passwordInput.value;

            if (input === CORRECT_PASSWORD) {
                // Mật khẩu đúng
                loginContainer.style.display = 'none';
                contentContainer.style.display = 'block';
                loadEnglishQuiz(); // Gọi hàm tải quiz tiếng Anh

                // Xóa thông báo lỗi cũ (nếu có)
                errorElement.textContent = '';
                passwordInput.value = ''; // Xóa input sau khi đúng

            } else {
                // Mật khẩu sai
                errorElement.textContent = 'Incorrect Access Code. Please try again.';
                passwordInput.value = ''; // Xóa input sai

                // Hiệu ứng rung lắc
                passwordInput.classList.add('shake');
                loginContainer.classList.add('shake'); // Rung cả container cho thêm phần "drama"
                setTimeout(() => {
                    passwordInput.classList.remove('shake');
                    loginContainer.classList.remove('shake');
                }, 500);
            }
        }

        // ====== QUESTION LOADING & HANDLING ======
        function loadEnglishQuiz() {
            const contentContainer = document.getElementById('content-container');
            const questionsContainer = document.getElementById('questions-container');
            if (!contentContainer || !questionsContainer) return; // Check elements

            // Clear previous content if any (safety measure)
            questionsContainer.innerHTML = '';

            const questions = [
                {
                    number: "Câu 1",
                    question: "Part-time jobs provide an opportunity to learn useful ______ such as communication and time management.",
                    options: [
                        "a. soft skills ✅",
                        "b. work experience",
                        "c. basic steps",
                        "d. career path"
                    ],
                    explanation: "<span>Giải thích:</span> \"Communication\" (giao tiếp) và \"time management\" (quản lý thời gian) là những ví dụ điển hình của <span>kỹ năng mềm (soft skills)</span>. Các lựa chọn khác không phù hợp: 'work experience' (kinh nghiệm làm việc), 'basic steps' (bước cơ bản), 'career path' (con đường sự nghiệp)."
                },
                {
                    number: "Câu 2",
                    question: "He is truly a <b>reliable</b> friend. He will always be with me and never let me down. (Tìm từ trái nghĩa)",
                    options: [
                        "a. untrustworthy ✅",
                        "b. independent",
                        "c. decisive",
                        "d. dependable"
                    ],
                    explanation: "<span>Giải thích:</span> Từ 'reliable' có nghĩa là đáng tin cậy. Từ trái nghĩa phù hợp nhất là <span>'untrustworthy' (không đáng tin)</span>. 'Dependable' là từ đồng nghĩa. 'Independent' (độc lập) và 'decisive' (quyết đoán) không liên quan về nghĩa đối lập."
                },
                {
                    number: "Câu 3",
                    question: "She left her job to pursue her lifelong <b>passion</b> for painting. (Tìm từ gần nghĩa)",
                    options: [
                        "a. demand",
                        "b. distraction",
                        "c. excitement ✅",
                        "d. experience"
                    ],
                    explanation: "<span>Giải thích:</span> 'Passion' có nghĩa là niềm đam mê mãnh liệt. Trong các lựa chọn, <span>'excitement' (sự hào hứng, nhiệt tình)</span> là từ gần nghĩa nhất, thể hiện sự hứng thú và tâm huyết. 'Demand' (nhu cầu), 'distraction' (sự xao nhãng), 'experience' (kinh nghiệm) không phù hợp."
                },
                {
                    number: "Câu 4",
                    question: "People with strong ______ are honest, responsible and confident.",
                    options: [
                        "a. subject",
                        "b. character ✅",
                        "c. interest",
                        "d. passion"
                    ],
                    explanation: "<span>Giải thích:</span> Các tính từ 'honest' (trung thực), 'responsible' (có trách nhiệm), 'confident' (tự tin) dùng để mô tả tính cách của một người. Do đó, từ phù hợp là <span>'character' (tính cách)</span>. 'Subject' (môn học), 'interest' (sở thích), 'passion' (đam mê) không đúng ngữ cảnh."
                },
                {
                    number: "Câu 5",
                    question: "<b>Face-to-face</b> socializing is not as preferred as virtual socializing among the youth. (Tìm từ trái nghĩa)",
                    options: [
                        "a. Direct",
                        "b. Facial",
                        "c. Indirect ✅",
                        "d. Instant"
                    ],
                    explanation: "<span>Giải thích:</span> 'Face-to-face' có nghĩa là trực tiếp, mặt đối mặt. Từ trái nghĩa là <span>'Indirect' (gián tiếp)</span>. 'Direct' là từ đồng nghĩa. 'Facial' (thuộc về khuôn mặt) và 'Instant' (tức thì) không liên quan."
                },
                {
                    number: "Câu 6",
                    question: "The mass media has become one of the <b>main</b> instruments of political change. (Tìm từ trái nghĩa)",
                    options: [
                        "a. tiny ✅",
                        "b. big",
                        "c. flexible",
                        "d. exciting"
                    ],
                    explanation: "<span>Giải thích:</span> 'Main' có nghĩa là chính, chủ yếu, quan trọng. Từ trái nghĩa phù hợp là <span>'tiny' (nhỏ bé, không đáng kể)</span> trong ngữ cảnh này, đối lập với vai trò chính. 'Big' (lớn) không hẳn là trái nghĩa trực tiếp. 'Flexible' (linh hoạt) và 'exciting' (thú vị) không liên quan."
                },
                {
                    number: "Câu 7",
                    question: "Lots of university students work as ______ to help school children learn better.",
                    options: [
                        "a. baristas",
                        "b. assistants",
                        "c. workers",
                        "d. tutors ✅"
                    ],
                    explanation: "<span>Giải thích:</span> Công việc giúp đỡ học sinh học tốt hơn thường được gọi là gia sư. Do đó, từ phù hợp là <span>'tutors' (gia sư)</span>. 'Baristas' (nhân viên pha cà phê), 'assistants' (trợ lý chung chung), 'workers' (công nhân) không đúng ngữ cảnh."
                },
                {
                     number: "Câu 8",
                     question: "A(n) ______ is a person who is paid to care for children while their parents are at work.",
                     options: [
                         "a. flight attendant",
                         "b. childminder ✅",
                         "c. barista",
                         "d. repair worker"
                     ],
                     explanation: "<span>Giải thích:</span> Định nghĩa mô tả công việc của một người trông trẻ. Từ chính xác là <span>'childminder'</span>. Các lựa chọn khác: 'flight attendant' (tiếp viên hàng không), 'barista' (nhân viên pha cà phê), 'repair worker' (thợ sửa chữa) đều sai."
                 },
                 {
                     number: "Câu 9",
                     question: "Smart robots have ______ humans in stressful and dangerous jobs.",
                     options: [
                         "a. replaced ✅",
                         "b. found",
                         "c. created",
                         "d. built"
                     ],
                     explanation: "<span>Giải thích:</span> Robot ngày càng được sử dụng để làm thay công việc của con người, đặc biệt là những công việc nguy hiểm hoặc căng thẳng. Từ phù hợp nhất là <span>'replaced' (thay thế)</span>. 'Found' (tìm thấy), 'created' (tạo ra), 'built' (xây dựng) không hợp lý trong ngữ cảnh này."
                 },
                 {
                     number: "Câu 10",
                     question: "A(n) ______ is a person whose job is to repair or control machines, engines, or electrical equipment.",
                     options: [
                         "a. chef",
                         "b. engineer ✅",
                         "c. shop assistant",
                         "d. nurse"
                     ],
                     explanation: "<span>Giải thích:</span> Định nghĩa mô tả công việc của một kỹ sư. Do đó, từ đúng là <span>'engineer' (kỹ sư)</span>. 'Chef' (đầu bếp), 'shop assistant' (nhân viên bán hàng), 'nurse' (y tá) đều sai."
                 },
                 {
                     number: "Câu 11",
                     question: "There are many jobs that don’t require a university ______.",
                     options: [
                         "a. degree ✅",
                         "b. source",
                         "c. career",
                         "d. skill"
                     ],
                     explanation: "<span>Giải thích:</span> Khi nói đến yêu cầu học vấn từ trường đại học, người ta thường nhắc đến bằng cấp. Cụm từ phổ biến là 'university degree'. Vậy đáp án là <span>'degree' (bằng cấp)</span>. 'Source' (nguồn), 'career' (sự nghiệp), 'skill' (kỹ năng) không phù hợp."
                 },
                 {
                     number: "Câu 12",
                     question: "She needs to study at medical school for some years of general medical training, followed by several years of <b>specialty</b> training. (Tìm từ gần nghĩa)",
                     options: [
                         "a. personality",
                         "b. position",
                         "c. major ✅",
                         "d. qualification"
                     ],
                     explanation: "<span>Giải thích:</span> 'Specialty training' có nghĩa là đào tạo chuyên ngành/chuyên sâu. Trong các lựa chọn, <span>'major' (chuyên ngành)</span> là từ gần nghĩa nhất. 'Personality' (tính cách), 'position' (vị trí), 'qualification' (bằng cấp, năng lực) không sát nghĩa."
                 },
                 {
                     number: "Câu 13",
                     question: "Candidates should demonstrate ______, such as team work, enthusiasm and emotional intelligence.",
                     options: [
                         "a. work experience",
                         "b. effective solutions",
                         "c. soft skills ✅",
                         "d. job opportunities"
                     ],
                     explanation: "<span>Giải thích:</span> Các ví dụ được liệt kê như 'team work' (làm việc nhóm), 'enthusiasm' (nhiệt tình), 'emotional intelligence' (trí tuệ cảm xúc) đều thuộc về kỹ năng mềm. Do đó, đáp án là <span>'soft skills' (kỹ năng mềm)</span>."
                 },
                 {
                     number: "Câu 14",
                     question: "The employers want job applicants to be able to <b>demonstrate</b> their skills and qualities. (Tìm từ gần nghĩa)",
                     options: [
                         "a. sell",
                         "b. exchange",
                         "c. display ✅",
                         "d. conceal"
                     ],
                     explanation: "<span>Giải thích:</span> 'Demonstrate' có nghĩa là thể hiện, trình bày, chứng tỏ. Từ <span>'display' (trưng bày, thể hiện)</span> có nghĩa gần nhất trong ngữ cảnh này. 'Sell' (bán), 'exchange' (trao đổi), 'conceal' (che giấu - trái nghĩa) không phù hợp."
                 },
                 {
                     number: "Câu 15",
                     question: "I’d go mad if I had to do a <b>dead-end</b> job like working on a supermarket checkout. (Tìm từ trái nghĩa)",
                     options: [
                         "a. fascinating ✅",
                         "b. flexible",
                         "c. boring",
                         "d. reliable"
                     ],
                     explanation: "<span>Giải thích:</span> 'Dead-end job' là công việc nhàm chán, không có cơ hội thăng tiến. Từ trái nghĩa mô tả một công việc thú vị, hấp dẫn là <span>'fascinating' (hấp dẫn, lôi cuốn)</span>. 'Boring' (nhàm chán) là đồng nghĩa. 'Flexible' (linh hoạt), 'reliable' (đáng tin cậy) không phải là trái nghĩa trực tiếp."
                 },
                 {
                     number: "Câu 16",
                     question: "He held a senior <b>position</b> in a large corporation. (Tìm từ gần nghĩa)",
                     options: [
                         "a. post ✅",
                         "b. character",
                         "c. passion",
                         "d. debris"
                     ],
                    explanation: "<span>Giải thích:</span> 'Position' trong ngữ cảnh này có nghĩa là vị trí, chức vụ trong công việc. Từ <span>'post'</span> cũng có nghĩa tương tự (vị trí, chức vụ). 'Character' (tính cách), 'passion' (đam mê), 'debris' (mảnh vỡ) hoàn toàn không liên quan."
                }
            ];

            // Render each question
            questions.forEach((q) => {
                const questionEl = document.createElement('div');
                questionEl.className = 'question';

                // Tìm index của câu trả lời đúng dựa vào dấu ✅
                let correctIndex = -1;
                const optionsHTML = q.options.map((opt, optIndex) => {
                    const isCorrect = opt.includes('✅');
                    if (isCorrect) {
                        correctIndex = optIndex; // Lưu lại index đúng
                    }
                    // Loại bỏ dấu ✅ khỏi hiển thị cuối cùng (có thể giữ lại nếu muốn)
                    const displayText = opt.replace('✅', '').trim();
                    return `<div class="option" data-correct="${isCorrect}">${displayText}</div>`;
                }).join('');


                const questionHTML = `
                    <div class="question-number">${q.number}</div>
                    <div class="question-text">${q.question}</div>
                    <div class="options">
                        ${optionsHTML}
                    </div>
                    <div class="explanation">
                        <div class="explanation-title">
                            <i class="material-icons">lightbulb</i>
                            Giải thích
                        </div>
                        ${q.explanation}
                    </div>
                `;

                questionEl.innerHTML = questionHTML;
                questionsContainer.appendChild(questionEl);
            });

            // Add event listeners AFTER questions are in the DOM
            attachOptionListeners();

             // Logout button functionality needs to be set up after loading content
             setupLogoutButton();

        }

        function attachOptionListeners() {
             document.querySelectorAll('.option').forEach(option => {
                // Remove any existing listeners to prevent duplicates if loadEnglishQuiz is called multiple times
                // A bit advanced, but good practice: replace the node with its clone
                // const newOption = option.cloneNode(true);
                // option.parentNode.replaceChild(newOption, option);
                // --- Or simply ensure this runs only once per option ---
                // A simpler check: if the listener is already attached, skip. We'll use a flag.
                 if (option.dataset.listenerAttached === 'true') return;
                 option.dataset.listenerAttached = 'true'; // Mark as attached

                 option.addEventListener('click', function() {
                    const question = this.closest('.question');
                    if (!question) return;

                    const explanation = question.querySelector('.explanation');
                    const allOptions = question.querySelectorAll('.option');

                    // Reset styles for all options in this question
                    allOptions.forEach(opt => {
                        opt.classList.remove('selected', 'correct', 'incorrect');
                        opt.style.fontWeight = 'normal'; // Reset font weight
                        opt.style.textDecoration = 'none'; // Reset text decoration
                    });

                    // Mark the clicked option
                    this.classList.add('selected');
                    const isCorrect = this.getAttribute('data-correct') === 'true';

                    if (isCorrect) {
                        this.classList.add('correct');
                        this.style.fontWeight = 'bold';
                    } else {
                        this.classList.add('incorrect');
                        this.style.textDecoration = 'line-through'; // Gạch chân đáp án sai
                        // Highlight the correct answer
                        const correctOption = question.querySelector(`.option[data-correct="true"]`);
                        if (correctOption) {
                            correctOption.classList.add('correct');
                             correctOption.style.fontWeight = 'bold'; // Bôi đậm đáp án đúng
                        }
                    }

                    // Show explanation
                    if (explanation) {
                        explanation.style.display = 'block';
                    }
                });
            });
        }

         function setupLogoutButton() {
             const logoutBtn = document.getElementById('logout-btn');
             const loginContainer = document.getElementById('login-container');
             const contentContainer = document.getElementById('content-container');
             const passwordInput = document.getElementById('password-input');
             const errorElement = document.getElementById('error-message');

             if (!logoutBtn || !loginContainer || !contentContainer || !passwordInput || !errorElement) return;

             // Clone and replace to ensure only one listener is active
             const newLogoutBtn = logoutBtn.cloneNode(true);
             logoutBtn.parentNode.replaceChild(newLogoutBtn, logoutBtn);

             newLogoutBtn.addEventListener('click', function() {
                loginContainer.style.display = 'block';
                contentContainer.style.display = 'none';
                passwordInput.value = ''; // Clear password field on logout
                errorElement.textContent = ''; // Clear any previous error message
                // Optionally, reset quiz state (remove selected/correct/incorrect classes)
                document.querySelectorAll('.option').forEach(opt => {
                    opt.classList.remove('selected', 'correct', 'incorrect');
                    opt.style.fontWeight = 'normal';
                    opt.style.textDecoration = 'none';
                 });
                document.querySelectorAll('.explanation').forEach(exp => exp.style.display = 'none');
             });
         }


        // ====== INITIALIZATION ======
        document.addEventListener('DOMContentLoaded', function() {
            // Create particles
            createParticles();

            // Password submission handlers
            const submitBtn = document.getElementById('submit-btn');
            const passwordInput = document.getElementById('password-input');

            if (submitBtn) {
                 submitBtn.addEventListener('click', checkPassword);
             }
             if (passwordInput) {
                 passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                         e.preventDefault(); // Prevent default form submission if any
                         checkPassword();
                    }
                 });
             }

            // Resize handler to recreate particles
            let resizeTimeout;
            window.addEventListener('resize', () => {
                 clearTimeout(resizeTimeout);
                 resizeTimeout = setTimeout(createParticles, 200); // Debounce particle creation
             });
        });

    </script>
</body>
</html>
